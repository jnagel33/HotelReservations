//
//  HotelReservationsStyleKit.m
//  HotelReservations
//
//  Created by jnagel on 5/6/15.
//  Copyright (c) 2015 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "HotelReservationsStyleKit.h"


@implementation HotelReservationsStyleKit

#pragma mark Cache

static UIColor* _darkYellow = nil;
static UIColor* _blueDark = nil;
static UIColor* _blueLight = nil;

static PCGradient* _gradient2 = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _darkYellow = [UIColor colorWithRed: 0.155 green: 0.177 blue: 0 alpha: 1];
    _blueDark = [UIColor colorWithRed: 0.161 green: 0.293 blue: 0.587 alpha: 1];
    _blueLight = [UIColor colorWithRed: 0.098 green: 0.807 blue: 0.973 alpha: 1];

    // Gradients Initialization
    CGFloat gradient2Locations[] = {0, 0, 0.87, 1, 1};
    _gradient2 = [PCGradient gradientWithColors: @[HotelReservationsStyleKit.blueLight, [HotelReservationsStyleKit.blueLight blendedColorWithFraction: 0.5 ofColor: HotelReservationsStyleKit.blueDark], HotelReservationsStyleKit.blueDark, [HotelReservationsStyleKit.blueDark blendedColorWithFraction: 0.5 ofColor: HotelReservationsStyleKit.darkYellow], HotelReservationsStyleKit.darkYellow] locations: gradient2Locations];

}

#pragma mark Colors

+ (UIColor*)darkYellow { return _darkYellow; }
+ (UIColor*)blueDark { return _blueDark; }
+ (UIColor*)blueLight { return _blueLight; }

#pragma mark Gradients

+ (PCGradient*)gradient2 { return _gradient2; }

#pragma mark Drawing Methods

+ (void)drawSectionHeaderWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(CGRectGetMinX(frame), CGRectGetMinY(frame), 600, 40);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: rectangleRect];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, HotelReservationsStyleKit.gradient2.CGGradient,
        CGPointMake(CGRectGetMidX(rectangleRect), CGRectGetMinY(rectangleRect)),
        CGPointMake(CGRectGetMidX(rectangleRect), CGRectGetMaxY(rectangleRect)),
        0);
    CGContextRestoreGState(context);
}

+ (void)drawPlusButtonWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 1.00000 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
    [color3 setFill];
    [rectanglePath fill];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12502 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41667 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12500 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26071 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74595 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41667 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74595 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.58333 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.58333 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.87500 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73929 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.87500 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44865 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.87500 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44865 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.58333 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.44865 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.87500 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.44865 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73929 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.25946 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.58333 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.25946 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41667 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44865 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41667 * CGRectGetHeight(frame))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.44865 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12500 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.44865 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.26071 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.44865 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12500 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12500 * CGRectGetHeight(frame))];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.55676 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12502 * CGRectGetHeight(frame))];
    [bezierPath closePath];
    CGContextSaveGState(context);
    [bezierPath addClip];
    CGRect bezierBounds = CGPathGetPathBoundingBox(bezierPath.CGPath);
    CGContextDrawLinearGradient(context, HotelReservationsStyleKit.gradient2.CGGradient,
        CGPointMake(CGRectGetMidX(bezierBounds), CGRectGetMinY(bezierBounds)),
        CGPointMake(CGRectGetMidX(bezierBounds), CGRectGetMaxY(bezierBounds)),
        0);
    CGContextRestoreGState(context);
}

+ (void)drawMinusButtonWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 1.00000 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
    [color3 setFill];
    [rectangle4Path fill];


    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.26111 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.41667 + 0.5), floor(CGRectGetWidth(frame) * 0.74444 + 0.5) - floor(CGRectGetWidth(frame) * 0.26111 + 0.5), floor(CGRectGetHeight(frame) * 0.58333 + 0.5) - floor(CGRectGetHeight(frame) * 0.41667 + 0.5));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: rectangleRect];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, HotelReservationsStyleKit.gradient2.CGGradient,
        CGPointMake(CGRectGetMidX(rectangleRect), CGRectGetMinY(rectangleRect)),
        CGPointMake(CGRectGetMidX(rectangleRect), CGRectGetMaxY(rectangleRect)),
        0);
    CGContextRestoreGState(context);
}

#pragma mark Generated Images

+ (UIImage*)imageOfSectionHeaderWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [HotelReservationsStyleKit drawSectionHeaderWithFrame: frame];

    UIImage* imageOfSectionHeader = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfSectionHeader;
}

+ (UIImage*)imageOfPlusButtonWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [HotelReservationsStyleKit drawPlusButtonWithFrame: frame];

    UIImage* imageOfPlusButton = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfPlusButton;
}

+ (UIImage*)imageOfMinusButtonWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [HotelReservationsStyleKit drawMinusButtonWithFrame: frame];

    UIImage* imageOfMinusButton = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfMinusButton;
}

@end



@interface PCGradient ()
{
    CGGradientRef _CGGradient;
}
@end

@implementation PCGradient

- (instancetype)initWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    self = super.init;
    if (self)
    {
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        NSMutableArray* cgColors = NSMutableArray.array;
        for (UIColor* color in colors)
            [cgColors addObject: (id)color.CGColor];

        _CGGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)cgColors, locations);
        CGColorSpaceRelease(colorSpace);
    }
    return self;
}

+ (instancetype)gradientWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    return [self.alloc initWithColors: colors locations: locations];
}

+ (instancetype)gradientWithStartingColor: (UIColor*)startingColor endingColor: (UIColor*)endingColor
{
    CGFloat locations[] = {0, 1};
    return [self.alloc initWithColors: @[startingColor, endingColor] locations: locations];
}

- (void)dealloc
{
    CGGradientRelease(_CGGradient);
}

@end



@implementation UIColor (PaintCodeAdditions)

- (UIColor*)blendedColorWithFraction: (CGFloat)fraction ofColor: (UIColor*)color2
{
    UIColor* color1 = self;

    CGFloat r1 = 0, g1 = 0, b1 = 0, a1 = 0;
    CGFloat r2 = 0, g2 = 0, b2 = 0, a2 = 0;


    [color1 getRed: &r1 green: &g1 blue: &b1 alpha: &a1];
    [color2 getRed: &r2 green: &g2 blue: &b2 alpha: &a2];

    CGFloat r = r1 * (1 - fraction) + r2 * fraction;
    CGFloat g = g1 * (1 - fraction) + g2 * fraction;
    CGFloat b = b1 * (1 - fraction) + b2 * fraction;
    CGFloat a = a1 * (1 - fraction) + a2 * fraction;

    return [UIColor colorWithRed: r green: g blue: b alpha: a];
}

@end
